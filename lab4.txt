Question 1: What is the link to your github repository for this lab?
https://github.com/kbalisnomo/cmput404-lab4

Question 2: After starting a brand new Django application and running the runserver command, what does the browser show you?
The browser shows an successful installation page. It displays an animation of a rocket blasting off into space.

Question 3: After creating the first view within polls, what does the browser show you when navigating to / and to /polls respectively?
When navigating to /:
The browser shows a 404 Page Not Found Error as well as paths within our urls file we might want to go to
When navigating to /polls:
The browser shows the "Hello World" message we sent in the view within polls

Question 4: What is a Django migration and why do we need them?
It is a way of telling Django that you have made changes to the models.
It is similar in a way to git in that it keeps a record of all data and changes to said data.
Handy if you made a change to a large set of data that you'd like to take back.

Question 5: What do you see after you log into the Django adminstration site? From a high level, how do you get custom models to appear in the Django admin page?
We can see the "Authentication and Authorization" and "Polls" sections. The Polls section contains the models which we created earlier.
To get custom models to appear in the Django admin page we can register them into the admin site. (Ex. via this python code: admin.site.register(Choice))

Question 6: What do you see when you go to /polls/38/ in your browser? What about /polls/38/results and /polls/38/vote? What happens when you donâ€™t put a number, and instead use a string? How would you modify the urls.py file to allow arbitrary alphabetic characters?
/polls/38:
You're looking at question 83.
/polls/38/results:
You're looing at the results of question 83
/polls/38/vote:
You're voting on question 83.
/polls/string:
Get a 404 Page Not Found. Change the int path parameter to str and it will be able to accept strings

Question 7: Why is it a bad idea to hardcode urls into the templates?
URLs may change over the development process and by not hardcoding it we will only have to change it in one place.
Also in our case with specific data in the urls, as data grows so do the number of urls needed. By keeping them generic we are able to utilize it for all data.

Question 8: What are the benefits of using Django's generic views over writing views 'the hard way'? When should you use a generic view and when shouldn't you use a generic view?
Using generic views reduces redundancy in the code and saves lots of typing! We should use a generic view in the general case and not when we need a more custom view like we did for vote.
